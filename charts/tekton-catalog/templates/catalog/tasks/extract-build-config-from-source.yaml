apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: extract-build-config-from-source
  labels:
    app.kubernetes.io/version: "0.0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: git, clone
    tekton.dev/displayName: "Extract build conf from project"
spec:
  description: >-
    This task extract project build configurations from sources
  workspaces:
    - name: source
  params:
    - name: branch-override
      description: Override detected branch (this helps to know when it is a tag)
      type: string
      default: ""
    - name: build-format-override
      description: Override detected build format with given value
      type: string
      default: ""
    - name: build-tool-override
      description: Override detected build tool with given value
      type: string
      default: ""
    - name: chart-name-override
      description: specify an override chart name to use
      type: string
    - name: chart-version-override
      description: specify an override chart version to use
    - name: deploy-enabled
      description: Whether or not to deploy
      type: string
    - name: directory
      description: The directory containing the app, relative to the source repository
        root
      type: string
      default: .
    - name: dockerfile-override
      description: specify dockerfile to use
      type: string
      default: ""
    - name: image
      description: The image used by the task
      type: string
      default: neo9sas/build-detector:latest
  results:
    - name: CNB_BUILDER
      description: The detected CNB builder to use
      type: string
    - name: BUILD_TOOL
      description: The build tool to use (docker, npm, gradle, maven)
      type: string
    - name: BUILD_TOOL_TOO
      description: The build tool to use (npm, gradle, maven), this to detect with build
        tool we use even with docker detected
      type: string
    - name: IMAGE_BUILD_BUILD_TOOL
      description: The build tool to use (jib, cnb)
      type: string
    - name: BUILD_FORMAT
      description: The format target. A container image by default, but also accept
        package
      type: string
    - name: HELM_CHART_NAME
      description: The chart to use for deployment
      type: string
    - name: HELM_CHART_VERSION
      description: The version of the chart to use for deployment
      type: string
    - name: CYPRESS_TI
      description: If the project has e2e tests with cypress
      type: string
    - name: BRANCH
      description: branch name or tag
      type: string
    - name: PIPELINERUN_NAME
      description: Pipeline name
      type: string
    - name: PREINSTALL
      description: if we should run a preinstall script
    - name: POSTINSTALL
      description: if we should run a POSTINSTALL script
      type: string
    - name: SHOULD_DEPLOY
      description: check if we need to deploy using helm
      type: string
    - name: LIGHTHOUSE_CI
      description: If the project have lighthouseci configuration file
    - name: OVERRIDE_DEPS # TODO
      description: check if we need to run override-dependencies
      type: string
  volumes:
    - name: podinfo
      downwardAPI:
        items:
          - path: "labels"
            fieldRef:
              fieldPath: metadata.labels['tekton.dev/pipelineRun']
  steps:
    - name: scan-project
      image: $(params.image)
      workingDir: $(workspaces.source.path)/$(params.directory)
      env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: PARAMS_BRANCH_OVERRIDE
          value: $(params.branch-override)
        - name: PARAMS_BUILD_FORMAT_OVERRIDE
          value: $(params.build-format-override)
        - name: PARAMS_BUILD_TOOL_OVERRIDE
          value: $(params.build-tool-override)
        - name: PARAMS_CHART_NAME_OVERRIDE
          value: $(params.chart-name-override)
        - name: PARAMS_CHART_VERSION_OVERRIDE
          value: $(params.chart-version-override)
        - name: PARAMS_DEPLOY_ENABLED
          value: $(params.chart-version-override)
        - name: PARAMS_DIRECTORY
          value: $(params.directory)
        - name: PARAMS_DOCKERFILE_OVERRIDE
          value: $(params.dockerfile-override)
        - name: OUTPUT_PATH
          value: $(workspaces.source.path)/$(params.directory)
        - name: OUTPUT_NAME
          value: "build-detector.json"
      volumeMounts:
        - name: podinfo
          mountPath: /etc/podinfo
      script: |

        build-detector

        cat "build-detector.json" | jq ."detectedCnbBuilder" > $(results.CNB_BUILDER.path)
        cat "build-detector.json" | jq ."detectedBuildTool" > $(results.BUILD_TOOL.path)
        cat "build-detector.json" | jq ."detectedBuildToolToo" > $(results.BUILD_TOOL_TOO.path)
        cat "build-detector.json" | jq ."detectedImageBuildTool" > $(results.IMAGE_BUILD_BUILD_TOOL.path)
        cat "build-detector.json" | jq ."detectedBuildFormat" > $(results.BUILD_FORMAT.path)
        cat "build-detector.json" | jq ."detectedChartName" > $(results.HELM_CHART_NAME.path)
        cat "build-detector.json" | jq ."detectedChartVersion" > $(results.HELM_CHART_VERSION.path)
        cat "build-detector.json" | jq ."detectedCypressTest" > $(results.CYPRESS_TI.path)
        cat "build-detector.json" | jq ."detectedBranch" > $(results.BRANCH.path)
        cat "build-detector.json" | jq ."piplinerunName" > $(results.PIPELINERUN_NAME.path)
        cat "build-detector.json" | jq ."preinstall" > $(results.PREINSTALL.path)
        cat "build-detector.json" | jq ."postinstall" > $(results.POSTINSTALL.path)
        cat "build-detector.json" | jq ."shouldBeDeployed" > $(results.SHOULD_DEPLOY.path)
        cat "build-detector.json" | jq ."detectedLhci" > $(results.LIGHTHOUSE_CI.path)
        cat "build-detector.json" | jq ."buildDependencies" > $(results.OVERRIDE_DEPS.path)
